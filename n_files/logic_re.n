x = Variable("x")
y = Variable("y")
z = Variable("z")
t = Expression("T", [])
f = Expression("F", [])
topic("Logic: rewriting expressions")
theorems = [
        stringRule("double negation", lnot(lnot(x)), x),
        stringRule("commutativity of and", wedge(x,y),wedge(y,x)),
        stringRule("commutativity of or", vee(x,y),vee(y,x)),
        stringRule("identity of and", wedge(x,t),x),
        stringRule("identity of or", vee(x,f),x),
        stringRule("annihilation of and", wedge(x,f),f),
        stringRule("annihilation of or", vee(x,t),t),
    ]
proof = generate_proof(theorems)
step1 = str(proof.lhs)
write_to_exercise("FText", "Here is an example proof, can you put it in the right order?")
z = form_logic_step(step1)
add_to_question(z)

original_steps = proof.steps
steps = proof.steps.copy()

random.shuffle(steps)

sts = create_steps(steps)

add_to_question(sts)

contents = get_response()
contents = [int(x) for x in contents.split('_')]

correct_proof = get_correct_proof(original_steps, steps)
if check_proof_answer(original_steps, steps, contents) == True:
    add_to_feedback("FText", "That is correct!")
    respond(True)
else:
    add_to_feedback("FText", "The order is incorrect. The correct order was ")
    add_to_feedback("FMath", correct_proof)
    respond(False)
